//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""UiNavigation1"",
            ""id"": ""dc18585d-528d-4866-934f-957c607a8ed6"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""54d437b8-d669-4efa-be99-bcef13a34cd0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8080b710-4c86-4182-b91c-8ef1389168a4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""03a78f61-ef4e-443e-81f4-4b97e26f7d4b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c086052d-bce2-4e3d-9f71-3cbdfd3f4bc0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1d30bd5f-b2e5-4992-bd06-6e500f1d4bbe"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cc427e50-1905-4067-9352-3d1449a90a0a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UiNavigation1
        m_UiNavigation1 = asset.FindActionMap("UiNavigation1", throwIfNotFound: true);
        m_UiNavigation1_move = m_UiNavigation1.FindAction("move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UiNavigation1
    private readonly InputActionMap m_UiNavigation1;
    private IUiNavigation1Actions m_UiNavigation1ActionsCallbackInterface;
    private readonly InputAction m_UiNavigation1_move;
    public struct UiNavigation1Actions
    {
        private @UserInput m_Wrapper;
        public UiNavigation1Actions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_UiNavigation1_move;
        public InputActionMap Get() { return m_Wrapper.m_UiNavigation1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UiNavigation1Actions set) { return set.Get(); }
        public void SetCallbacks(IUiNavigation1Actions instance)
        {
            if (m_Wrapper.m_UiNavigation1ActionsCallbackInterface != null)
            {
                @move.started -= m_Wrapper.m_UiNavigation1ActionsCallbackInterface.OnMove;
                @move.performed -= m_Wrapper.m_UiNavigation1ActionsCallbackInterface.OnMove;
                @move.canceled -= m_Wrapper.m_UiNavigation1ActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_UiNavigation1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @move.started += instance.OnMove;
                @move.performed += instance.OnMove;
                @move.canceled += instance.OnMove;
            }
        }
    }
    public UiNavigation1Actions @UiNavigation1 => new UiNavigation1Actions(this);
    public interface IUiNavigation1Actions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
